

========
Compare:
========

=> You can use the Compare Data Annotation to compare values in two fields/Textboxes.

=> The Compare Annotation ensures that the two properties on a model object have
same values.


-------
Syntax:
-------
=> [Compare("MatchingPropertyName")]


------------------------------------
For Displaying Custom Error Message:
------------------------------------
=> [Compare("MatchingPropertyName",ErrorMessage="You Message")]


-------------------------
Practical Implementation:
-------------------------

==========================
On Employees(Model Class):
==========================

    public class Employees
    {      
        //Password
        [Required(ErrorMessage = "Employee Password is mandatory")]
        [RegularExpression(@"(?=^.{8,}$)((?=.*\d)|(?=.*\W+))(?![.\n])(?=.*[A-Z])(?=.*[a-z]).*$",ErrorMessage ="Your password must be a combination of 8 characters, upper case, lower case, symbols, digits")]
        public string Password { get; set; }

        //Confirm Password
        [Required(ErrorMessage = "Confirm Password is mandatory")]
        [Compare("Password",ErrorMessage ="Password is not matched")]
        public string ConfirmPassword { get; set; }
    }
}


================
On Index.cshtml:
================

   <!-- For Password -->
<p>
    @Html.LabelFor(model => model.Password) &nbsp;

    @Html.TextBoxFor(model => model.Password, "", new
{
    @class = "form-control",
    placeholder = "Enter password"
})

@Html.ValidationMessageFor(model => model.Password, "", new
{
    @class = "text-danger"
})
</p>



           <!-- For Confirm Password -->
<p>
    @Html.LabelFor(model => model.ConfirmPassword) &nbsp;

    @Html.TextBoxFor(model => model.ConfirmPassword, "", new
{
    @class = "form-control",
    placeholder = "Enter password"
})

    @Html.ValidationMessageFor(model => model.ConfirmPassword, "", new
{
    @class = "text-danger"
})
</p>



